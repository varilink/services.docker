# ------------------------------------------------------------------------------
# docker-compose.yml
# ------------------------------------------------------------------------------

version: "3.7"

networks:

  # We use the IPAM driver to allocate a subnet. Service hosts are then
  # allocated fixed IP addresses from 10.0.0.101 and test clients are allowed to
  # pick up dynamically allocated IP addresses from the Docker DHCP service.

  # The service hosts simulate a hybird server estate, combining on-premise or
  # office hosted servers (internal) with servers provided by our Cloud, virtual
  # server hosting provider (external). We don't simulate that network
  # separation in this Docker Compose project, as to do so would add complexity
  # without serving any practical purpose.

  office:
    ipam:
      config:
        - subnet: 10.0.0.0/24

  internet:
    ipam:
      config:
        - subnet: 10.0.1.0/24

services:

  # Docker Compose services that are used to create and bring up the Docker
  # Compose services that emulate hosts in our server estate and deploy
  # application services to them using Ansible.

  raise-hosts:
    # Outputs the required dockker and docker-compose commands to bring up the
    # host emulation Docker Compose services for an environment. These commands
    # are piped into a shell to execute them.
    build: ./build/raise-hosts
    environment:
      - MYENV
    network_mode: none
    volumes:
      - ./envs/${MYENV}/services-to-hosts.sh:/usr/src/services-to-hosts.sh

  playbook:
    # Runs the Ansible playbooks that deploy our application services to the
    # host emulation Docker containers for each environment.
    build: ./build/playbook
    environment:
      - MYENV
    volumes:
      - ./envs/${MYENV}/:/environment/:ro
      - ./playbooks/:/playbooks/:ro
      - ./my-roles/:/my-roles:ro
      - ./roles/:/roles/:ro
    networks:
      office:
    cap_add:
      - NET_ADMIN

  router:
    build: ./build/router
    env_file:
      - ./envs/${MYENV}/test/network.env
    volumes:
      - ./build/router/templates:/etc/nginx/templates
    networks:
      internet:
        ipv4_address: 10.0.1.254
      office:
        ipv4_address: 10.0.0.254

  # Docker Compose services that provide clients that can be used to test the
  # function of the application services that are deployed using Ansible to the
  # hosts in an environment.

  bconsole:
    build: ./build/bconsole
    env_file:
      - ./envs/${MYENV}/test/network.env
    volumes:
      - ./envs/${MYENV}/test/bconsole.conf:/etc/bacula/bconsole.conf
    networks:
      office:

  cadaver:
    build: ./build/cadaver
    env_file:
      - ./envs/${MYENV}/test/network.env
    networks:
      office:

  dig:
    build: ./build/dig
    env_file:
      - ./envs/${MYENV}/test/network.env
    networks:
      office:
    cap_add:
      - NET_ADMIN

  lynx-external:
    build: ./build/lynx
    env_file:
      - ./envs/${MYENV}/test/network.env
    networks:
      internet:

  lynx-internal:
    build: ./build/lynx
    env_file:
      - ./envs/${MYENV}/test/network.env
    networks:
      office:

  mutt:
    build: ./build/mutt
    env_file:
      - ./envs/${MYENV}/test/network.env
    volumes:
      - ./envs/${MYENV}/test/mutt:/config
    networks:
      office:
    cap_add:
      - NET_ADMIN

  openssl:
    build: ./build/openssl
    env_file:
      - ./envs/${MYENV}/test/network.env
    networks:
      office:
    cap_add:
      - NET_ADMIN

  proxy-external:
    build: ./build/proxy
    env_file:
      - ./envs/${MYENV}/test/network.env
    command: external
    ports:
      - "3129:3128"
    networks:
      internet:
    cap_add:
      - NET_ADMIN

  proxy-internal:
    build: ./build/proxy
    env_file:
      - ./envs/${MYENV}/test/network.env
    command: internal
    ports:
      - "3128:3128"
    networks:
      office:
    cap_add:
      - NET_ADMIN

  traceroute-internal:
    build: ./build/traceroute
    networks:
      office:
    cap_add:
      - NET_ADMIN

  traceroute-external:
    build: ./build/traceroute
    networks:
      internet:
    cap_add:
      - NET_ADMIN

  swaks:
    build: ./build/swaks
    env_file:
      - ./envs/${MYENV}/test/network.env
    networks:
      office:
    cap_add:
      - NET_ADMIN

# There follows a noop service corresponding to all of the services that are
# defined in the now, to-be and distributed environment. These are present so
# that whenever we run the docker-compose command without specifying an
# environment files, and so Docker Compose defaults to the configuration within
# this file, we won't get any orphan container messages and docker-compose
# actions such as stop and rm will be default always affect all this project's
# containers.

  backup-director:
    build: ./build/noop
    image: varilink/noop

  backup-storage:
    build: ./build/noop
    image: varilink/noop

  caldav:
    build: ./build/noop
    image: varilink/noop

  database-external:
    build: ./build/noop
    image: varilink/noop

  database-internal:
    build: ./build/noop
    image: varilink/noop

  dev:
    image: scratch

  dns-external:
    build: ./build/noop
    image: varilink/noop

  dns-internal:
    build: ./build/noop
    image: varilink/noop

  dynamic-dns:
    build: ./build/noop
    image: varilink/noop

  hub:
    build: ./build/noop
    image: varilink/noop

  gateway:
    build: ./build/noop
    image: varilink/noop

  mail:
    build: ./build/noop
    image: varilink/noop

  mail-certificates:
    build: ./build/noop
    image: varilink/noop

  mail-external:
    build: ./build/noop
    image: varilink/noop

  mail-internal:
    build: ./build/noop
    image: varilink/noop

  monitor-gateway:
    build: ./build/noop
    image: varilink/noop

  prod:
    build: ./build/noop
    image: varilink/noop

  reverse-proxy-gateway:
    build: ./build/noop
    image: varilink/noop

  reverse-proxy-external:
    build: ./build/noop
    image: varilink/noop

  reverse-proxy-internal:
    build: ./build/noop
    image: varilink/noop

  wordpress-external:
    build: ./build/noop
    image: varilink/noop

  wordpress-internal:
    build: ./build/noop
    image: varilink/noop
